@rendermode InteractiveWebAssembly

@inject IHttpClientFactory HttpClientFactory;
@inject IJSRuntime JsRuntime;

<h3>BlocklyEditor</h3>

<div id="blocklyDiv" style="height: 600px; width: 500px;"></div>
<div id="textarea">Code Goes Here</div>


<script src="blockly/loadBlockly.js"></script>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        using var Http = HttpClientFactory.CreateClient("GameServer");
        var definitions = await Http.GetStringAsync("api/Blockly/definitions");
        var toolbox = await Http.GetStringAsync("api/Blockly/toolbox");

        await JsRuntime.InvokeAsync<object>("initialiseBlockly", definitions, toolbox);
    }

    [JSInvokable]
    public async Task<string> CallUserApi()
    {
        using var Http = HttpClientFactory.CreateClient("GameServer");
        return await Http.GetStringAsync("api/TestAuth/userId");
    }
}
